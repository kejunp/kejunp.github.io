digraph "ExpressionNode"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="ExpressionNode",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Base class for all expressions."];
  Node2 -> Node1 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="ASTNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structASTNode.html",tooltip="Base class of all AST nodes."];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="AssignmentExpressionNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structAssignmentExpressionNode.html",tooltip="An assignment expression (e.g., x = 5, y = func())"];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="BinaryExpressionNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structBinaryExpressionNode.html",tooltip="A binary expression (e.g., a + b, x == y, etc.)"];
  Node1 -> Node5 [id="edge4_Node000001_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="IdentifierNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structIdentifierNode.html",tooltip="A identifier."];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="IfElseExpressionNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structIfElseExpressionNode.html",tooltip="An if-else expression (e.g., if condition { then_expr } else { else_expr })"];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="LiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structLiteralNode.html",tooltip="Base class for all literals."];
  Node7 -> Node8 [id="edge7_Node000007_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="BooleanLiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structBooleanLiteralNode.html",tooltip="A boolean literal (true or false)"];
  Node7 -> Node9 [id="edge8_Node000007_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="FloatLiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structFloatLiteralNode.html",tooltip="A float literal."];
  Node7 -> Node10 [id="edge9_Node000007_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="IntegerLiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structIntegerLiteralNode.html",tooltip="A integer literal."];
  Node7 -> Node11 [id="edge10_Node000007_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="StringLiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structStringLiteralNode.html",tooltip="A string literal."];
  Node1 -> Node12 [id="edge11_Node000001_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="UnaryExpressionNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structUnaryExpressionNode.html",tooltip="A unary expression (e.g., !x, -y, etc.)"];
}
