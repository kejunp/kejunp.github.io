digraph "ASTNode"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="ASTNode",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Base class of all AST nodes."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="ExpressionNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structExpressionNode.html",tooltip="Base class for all expressions."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="AssignmentExpressionNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structAssignmentExpressionNode.html",tooltip="An assignment expression (e.g., x = 5, y = func())"];
  Node2 -> Node4 [id="edge3_Node000002_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="BinaryExpressionNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structBinaryExpressionNode.html",tooltip="A binary expression (e.g., a + b, x == y, etc.)"];
  Node2 -> Node5 [id="edge4_Node000002_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="CallExpressionNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structCallExpressionNode.html",tooltip=" "];
  Node2 -> Node6 [id="edge5_Node000002_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="IdentifierNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structIdentifierNode.html",tooltip="A identifier."];
  Node2 -> Node7 [id="edge6_Node000002_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="IfElseExpressionNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structIfElseExpressionNode.html",tooltip="An if-else expression (e.g., if condition { then_expr } else { else_expr })"];
  Node2 -> Node8 [id="edge7_Node000002_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="LiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structLiteralNode.html",tooltip="Base class for all literals."];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="ArrayLiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structArrayLiteralNode.html",tooltip="An array literal (e.g., [1, 2, 3])"];
  Node8 -> Node10 [id="edge9_Node000008_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="BooleanLiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structBooleanLiteralNode.html",tooltip="A boolean literal (true or false)"];
  Node8 -> Node11 [id="edge10_Node000008_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="DictLiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structDictLiteralNode.html",tooltip="A dictionary literal (e.g., {key: value, key2: value2})"];
  Node8 -> Node12 [id="edge11_Node000008_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="FloatLiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structFloatLiteralNode.html",tooltip="A float literal."];
  Node8 -> Node13 [id="edge12_Node000008_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="IntegerLiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structIntegerLiteralNode.html",tooltip="A integer literal."];
  Node8 -> Node14 [id="edge13_Node000008_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="StringLiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structStringLiteralNode.html",tooltip="A string literal."];
  Node2 -> Node15 [id="edge14_Node000002_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="UnaryExpressionNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structUnaryExpressionNode.html",tooltip="A unary expression (e.g., !x, -y, etc.)"];
  Node1 -> Node16 [id="edge15_Node000001_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="ProgramNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structProgramNode.html",tooltip="The root of all ASTs (sorta like a block statement, but the block is global)"];
  Node1 -> Node17 [id="edge16_Node000001_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="StatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structStatementNode.html",tooltip="Base class for all statements."];
  Node17 -> Node18 [id="edge17_Node000017_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="BlockStatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structBlockStatementNode.html",tooltip="A block statement { [statements... ] }."];
  Node17 -> Node19 [id="edge18_Node000017_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="ExpressionStatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structExpressionStatementNode.html",tooltip="A wrapper around a expression (but it is a statement)"];
  Node17 -> Node20 [id="edge19_Node000017_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="ForLoopStatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structForLoopStatementNode.html",tooltip=" "];
  Node17 -> Node21 [id="edge20_Node000017_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="FunctionStatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structFunctionStatementNode.html",tooltip=" "];
  Node17 -> Node22 [id="edge21_Node000017_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="ReturnStatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structReturnStatementNode.html",tooltip="A return statement (different from a implicit return, e.g. 5; will become a expression statement,..."];
  Node17 -> Node23 [id="edge22_Node000017_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="VariableStatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structVariableStatementNode.html",tooltip="A variable declaration/definition: let immut = 5; var mut = 5; etc."];
  Node17 -> Node24 [id="edge23_Node000017_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="WhileLoopStatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structWhileLoopStatementNode.html",tooltip="A while loop (e.g., while x < y { let x = 5 let y = 4;})"];
}
