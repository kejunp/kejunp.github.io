digraph "ASTNode"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="ASTNode",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Base class of all AST nodes."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="ExpressionNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structExpressionNode.html",tooltip="Base class for all expressions."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="IdentifierNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structIdentifierNode.html",tooltip="A identifier."];
  Node2 -> Node4 [id="edge3_Node000002_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="LiteralNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structLiteralNode.html",tooltip="Base class for all literals."];
  Node1 -> Node5 [id="edge4_Node000001_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="ProgramNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structProgramNode.html",tooltip="The root of all ASTs (sorta like a block statement, but the block is global)"];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="StatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structStatementNode.html",tooltip="Base class for all statements."];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="BlockStatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structBlockStatementNode.html",tooltip="A block statement { [statements... ] }."];
  Node6 -> Node8 [id="edge7_Node000006_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="ExpressionStatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structExpressionStatementNode.html",tooltip="A wrapper around a expression (but it is a statement)"];
  Node6 -> Node9 [id="edge8_Node000006_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="ReturnStatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structReturnStatementNode.html",tooltip="A return statement (different from a implicit return, e.g. 5; will become a expression statement,..."];
  Node6 -> Node10 [id="edge9_Node000006_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="VariableStatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structVariableStatementNode.html",tooltip="A variable declaration/definition: let immut = 5; var mut = 5; etc."];
  Node6 -> Node11 [id="edge10_Node000006_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="WhileLoopStatementNode",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$structWhileLoopStatementNode.html",tooltip="A while loop (e.g., while x < y { let x = 5 let y = 4;})"];
}
